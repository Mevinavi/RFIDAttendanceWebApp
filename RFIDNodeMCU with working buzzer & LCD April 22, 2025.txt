#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <MFRC522.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

//================= PIN DEFINITIONS =================
#define SS_PIN  D2
#define RST_PIN D1
#define BUZZER_PIN D8
#define SDA_PIN D3
#define SCL_PIN D4

//================= OBJECTS =========================
MFRC522 mfrc522(SS_PIN, RST_PIN);
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Address 0x27, 16 columns, 2 rows

//================= WIFI CONFIG =====================
const char *ssid = "PLDTHOMEFIBR6ea90";
const char *password = "PLDTWIFIu4tcu";
const char* device_token = "b5bcae86acd19d9e";
String URL = "http://192.168.1.5/rfidattendance/getdata.php";
String getData, Link;
String OldCardID = "";
unsigned long previousMillis = 0;

void setup() {
  delay(1000);
  Serial.begin(115200);

  Wire.begin(SDA_PIN, SCL_PIN); // Initialize I2C for LCD
  lcd.begin(16, 2);             // Specify LCD dimensions
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Booting...");

  SPI.begin();
  mfrc522.PCD_Init();

  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  connectToWiFi();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Ready to scan");
}

void loop() {
  if (!WiFi.isConnected()) {
    connectToWiFi();
  }

  if (millis() - previousMillis >= 15000) {
    previousMillis = millis();
    OldCardID = "";
  }

  delay(50);

  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  String CardID = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    CardID += mfrc522.uid.uidByte[i];
  }

  if (CardID == OldCardID) return;
  OldCardID = CardID;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Card Scanned:");
  lcd.setCursor(0, 1);
  lcd.print(CardID);

  SendCardID(CardID);
  buzz();
  delay(1000);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Ready to scan");
}

//========== BUZZER FEEDBACK ==========
void buzz() {
  digitalWrite(BUZZER_PIN, HIGH);
  delay(100);
  digitalWrite(BUZZER_PIN, LOW);
}

//========== SEND CARD UID ==========
void SendCardID(String Card_uid) {
  Serial.println("Sending the Card ID");
  if (WiFi.isConnected()) {
    HTTPClient http;
    getData = "?card_uid=" + String(Card_uid) + "&device_token=" + String(device_token);
    Link = URL + getData;
    http.begin(Link);

    int httpCode = http.GET();
    String payload = http.getString();

    Serial.println(httpCode);
    Serial.println(Card_uid);
    Serial.println(payload);

    lcd.clear();
    if (httpCode == 200) {
      if (payload.startsWith("login")) {
        lcd.print("Welcome:");
        lcd.setCursor(0, 1);
        lcd.print(payload.substring(5));
      } else if (payload.startsWith("logout")) {
        lcd.print("Goodbye:");
        lcd.setCursor(0, 1);
        lcd.print(payload.substring(6));
      } else if (payload == "succesful") {
        lcd.print("Success!");
      } else if (payload == "available") {
        lcd.print("Card available");
      } else {
        lcd.print("Unknown response");
      }
      delay(2000);
      http.end();
    }
  }
}

//========== CONNECT TO WIFI ==========
void connectToWiFi() {
  WiFi.mode(WIFI_OFF);
  delay(1000);
  WiFi.mode(WIFI_STA);
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Connecting WiFi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("Connected With Wi-Fi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WiFi Connected!");
  delay(1000);
}
